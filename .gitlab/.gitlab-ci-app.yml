image: webmutation/docker-gitlab-build-sonar

variables:
  BRANCH: "develop"
  PRJ: "my-workplace"

stages:
  - build
#   - callback
#   - deploy
  - notify

before_script:
  - npm config set registry https://registry.npmjs.org/ --silent
  - npm config set //registry.npmjs.org/${npmtoken_npm} --silent
  - npm config set cache /builds/eui/build_remote/cache  --global
  - npm config set always-auth true
  - git config --global user.email "DIGIT-EUI-SUPPORT@ec.europa.eu"
  - git config --global user.name "eUI BuildBot"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

build-prd:
  stage: build
  artifacts:
    when: always
    paths:
    - /builds/eui/cc-csdr-root-app/apps/$PRJ/*.zip
    - /builds/eui/cc-csdr-root-app/apps/$PRJ/variables
    - BUILDJOB.ID
  script:
    - echo $CI_JOB_ID >> BUILDJOB.ID
    - (if [ -f package-lock.json ]; then rm package-lock.json; fi);
    - npm install yarn@latest -g
    - npm install fx -g
    - yarn install
    - npm run init -- --project $PRJ --branch $BRANCH --containerOnly --build
    - npm run app:release $PRJ -- --branch $BRANCH --slackChannel ${slack_channels} --slackEndPoint ${slack_hook} --nexusUser ${nexus_user} --nexusPassword ${nexus_password} --jiraUser ${jira_user} --jiraPassword ${jira_password}
    - cd /builds/eui/cc-csdr-root-app/apps/$PRJ
    ## RAW ARTIFACT
    - echo 'var OPENID_LOGIN_ENVIRONMENT = "NONE";' > ./dist/assets/openid-login-environment.js
    - cat ./dist/assets/openid-login-config.disabled.json > ./dist/assets/dynamic-config.prod.json
    - DISTFILE_RAW=$PRJ-ui-raw-`date +%Y-%m-%d_%s`.zip
    - zip -q $DISTFILE_RAW -r ./dist/*
    - echo export DISTFILE_ZIP_RAW=$DISTFILE_RAW >> variables
    # ## DEV
    # - echo 'var OPENID_LOGIN_ENVIRONMENT = "dev";' > ./dist/assets/openid-login-environment.js
    # - cat ./dist/assets/openid-login-config.dev.json > ./dist/assets/dynamic-config.prod.json
    # - DISTFILE_DEV=myworkplace-ui-dev-`date +%Y-%m-%d_%s`.zip
    # - zip -q $DISTFILE_DEV -r ./dist/*
    # - echo export DISTFILE_ZIP_DEV=$DISTFILE_DEV >> variables
    # ## TEST
    # - echo 'var OPENID_LOGIN_ENVIRONMENT = "test";' > ./dist/assets/openid-login-environment.js
    # - cat ./dist/assets/openid-login-config.test.json > ./dist/assets/dynamic-config.prod.json
    # - DISTFILE_TEST=myworkplace-ui-test-`date +%Y-%m-%d_%s`.zip
    # - zip -q $DISTFILE_TEST -r ./dist/*
    # - echo export DISTFILE_ZIP_TEST=$DISTFILE_TEST >> variables
    # ## EXPORT VERSION
    # - cat ./package.json
    # - echo export MWP_VERSION="$(fx ./package.json .version)" >> variables


# call-bamboo:
#   cache: {}
#   stage: callback
#   allow_failure: true
#   when: always
#   script:
#     - source /builds/eui/cc-csdr-root-app/apps/$PRJ/variables
#     - echo $BUILD_ID
#     - echo $DISTFILE_ZIP_RAW
#     - echo $DISTFILE_ZIP_DEV
#     - echo $DISTFILE_ZIP_TEST
#     - echo $DISTFILE_ZIP_INT
#     - echo $DISTFILE_ZIP_ACC
#     - echo $DISTFILE_ZIP_TRN
#     - echo $MWP_VERSION
#     - echo $BAMBOOBUILDNUM
#     - BUILD_ID=$( cat BUILDJOB.ID )
#     - GITLAB_HOST_URL=$(echo $CI_PROJECT_URL | awk -F'/' '{ print $1 "//" $3 }')
#     - GITLAB_URL_RAW=$GITLAB_HOST_URL/api/v4/projects/$CI_PROJECT_ID/jobs/$BUILD_ID/artifacts/apps/$PRJ/$DISTFILE_ZIP_RAW
#     - GITLAB_URL_DEV=$GITLAB_HOST_URL/api/v4/projects/$CI_PROJECT_ID/jobs/$BUILD_ID/artifacts/apps/$PRJ/$DISTFILE_ZIP_DEV
#     - GITLAB_URL_TEST=$GITLAB_HOST_URL/api/v4/projects/$CI_PROJECT_ID/jobs/$BUILD_ID/artifacts/apps/$PRJ/$DISTFILE_ZIP_TEST
#     - echo $GITLAB_URL
#     - echo $GITLAB_URL_RAW
#     - curl -k -u ${bambootoken} -H "Content-Type:application/json" -X PUT "https://webgate.ec.europa.eu/CITnet/bamboo/rest/api/latest/queue/$BAMBOOBUILDNUM?stage=Deploy&executeAllStages=true&bamboo.variable.GITLAB_URL_RAW=$GITLAB_URL_RAW&bamboo.variable.GITLAB_URL_DEV=$GITLAB_URL_DEV&bamboo.variable.GITLAB_URL_TEST=$GITLAB_URL_TEST&bamboo.variable.MWP_VERSION=$MWP_VERSION&bamboo.variable.GITLAB_PIPELINE_ID=$CI_PIPELINE_ID"

## Notify Build job result (success or failure)
slack-notification:
  cache: {}
  stage: notify
  allow_failure: true
  when: always
  script:
  - BUILD_ID=$( cat BUILDJOB.ID )
  - GITLAB_HOST_URL=$(echo $CI_PROJECT_URL | awk -F'/' '{ print $1 "//" $3 }')
  - curl -s -o build.log --header "PRIVATE-TOKEN:${gitlab_token}" $GITLAB_HOST_URL'/api/v4/projects/'"$CI_PROJECT_ID"'/jobs/'"$BUILD_ID"'/trace'
  - curl -s -F filetype="javascript" -F channels="csdr-timeline-mwp" -F title="GitLab TRACE FILE - $BAMBOOBUILDNUM " -F file=@build.log -F token=${slack_bot_token} https://slack.com/api/files.upload

# ## Deploy to AWS DEV environment
# deploy-aws-dev:
#   cache: {}
#   when: manual
#   stage: deploy
#   allow_failure: true
#   before_script:
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY_DEV" | tr -d '\r' | ssh-add - > /dev/null
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan mwp.dev.ecdevops.eu >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - source /builds/eui/cc-csdr-root-app/apps/$PRJ/variables
#     - cd /builds/eui/cc-csdr-root-app/apps/$PRJ
#     - ls
#     - unzip $DISTFILE_ZIP_DEV
#     - echo 'var OPENID_LOGIN_ENVIRONMENT = "ecdevops-dev";' > ./dist/assets/openid-login-environment.js
#     - cat ./dist/assets/openid-login-config.ecdevops-dev.json > ./dist/assets/dynamic-config.prod.json
#     - DISTFILE=$DISTFILE_ZIP_DEV
#     - rm $DISTFILE_ZIP_DEV
#     - zip -q $DISTFILE -r ./dist/*
#     - echo '...uploading - ' $DISTFILE_ZIP_DEV
#     - curl -k -u uploader:$AWS_USER_PASS -T $DISTFILE_ZIP_DEV  sftp://mwp.dev.ecdevops.eu:/home/uploader/mwp/dist/$DISTFILE_ZIP_DEV
#     - ssh uploader@mwp.dev.ecdevops.eu /home/uploader/scripts/deploy_fend.sh
#     - "curl -s -X POST --data-urlencode 'payload={\"channel\": \"#csdr-timeline-mwp\", \"username\": \"eUI bot\", \"text\": \"Deploying to AWS DEV - https://mwp.dev.ecdevops.eu/mwp \"}' https://hooks.slack.com/services/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"
#   environment:
#     name: MWP AWS DEV
#     url: https://mwp.dev.ecdevops.eu/mwp


# ## Deploy to AWS TST environment
# deploy-aws-tst:
#   cache: {}
#   when: manual
#   stage: deploy
#   allow_failure: true
#   before_script:
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY_TST" | tr -d '\r' | ssh-add - > /dev/null
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan mwp.tst.ecdevops.eu >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - source /builds/eui/cc-csdr-root-app/apps/$PRJ/variables
#     - cd /builds/eui/cc-csdr-root-app/apps/$PRJ
#     - ls
#     - unzip $DISTFILE_ZIP_TEST
#     - echo 'var OPENID_LOGIN_ENVIRONMENT = "ecdevops-tst";' > ./dist/assets/openid-login-environment.js
#     - cat ./dist/assets/openid-login-config.ecdevops-tst.json > ./dist/assets/dynamic-config.prod.json
#     - DISTFILE=$DISTFILE_ZIP_TEST
#     - rm $DISTFILE_ZIP_TEST
#     - zip -q $DISTFILE -r ./dist/*
#     - echo '...uploading - ' $DISTFILE_ZIP_TEST
#     - curl -k -u uploader:$AWS_USER_PASS -T $DISTFILE_ZIP_TEST  sftp://mwp.tst.ecdevops.eu:/home/uploader/mwp/dist/$DISTFILE_ZIP_TEST
#     - ssh uploader@mwp.tst.ecdevops.eu /home/uploader/scripts/deploy_fend.sh
#     - "curl -s -X POST --data-urlencode 'payload={\"channel\": \"#csdr-timeline-mwp\", \"username\": \"eUI bot\", \"text\": \"Deploying to AWS TST - https://mwp.tst.ecdevops.eu/mwp \"}' https://hooks.slack.com/services/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"
#   environment:
#     name: MWP AWS TST
#     url: https://mwp.tst.ecdevops.eu/mwp

# ## Deploy to AWS E2E environment
# deploy-aws-e2e:
#   cache: {}
#   when: manual
#   stage: deploy
#   allow_failure: true
#   before_script:
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY_E2E" | tr -d '\r' | ssh-add - > /dev/null
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan mwp.e2e.ecdevops.eu >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - source /builds/eui/cc-csdr-root-app/apps/$PRJ/variables
#     - cd /builds/eui/cc-csdr-root-app/apps/$PRJ
#     - ls
#     - unzip $DISTFILE_ZIP_TEST
#     - echo 'var OPENID_LOGIN_ENVIRONMENT = "ecdevops-e2e";' > ./dist/assets/openid-login-environment.js
#     - cat ./dist/assets/openid-login-config.ecdevops-e2e.json > ./dist/assets/dynamic-config.prod.json
#     - DISTFILE=$DISTFILE_ZIP_TEST
#     - rm $DISTFILE_ZIP_TEST
#     - zip -q $DISTFILE -r ./dist/*
#     - echo '...uploading - ' $DISTFILE_ZIP_TEST
#     - curl -k -u uploader:$AWS_USER_PASS -T $DISTFILE_ZIP_TEST  sftp://mwp.e2e.ecdevops.eu:/home/uploader/mwp/dist/$DISTFILE_ZIP_TEST
#     - ssh uploader@mwp.e2e.ecdevops.eu /home/uploader/scripts/deploy_fend.sh
#     - "curl -s -X POST --data-urlencode 'payload={\"channel\": \"#csdr-timeline-mwp\", \"username\": \"eUI bot\", \"text\": \"Deploying to AWS E2E - https://mwp.e2e.ecdevops.eu/mwp \"}' https://hooks.slack.com/services/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"
#   environment:
#     name: MWP AWS E2E
#     url: https://mwp.e2e.ecdevops.eu/mwp
